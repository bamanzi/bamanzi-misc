* Emacs安装与启动

** Emacs vs XEmacs
** Windows版本的选择
...
** emacsclient
...
** daemon
...
** server-dump
...

* 第三方包
** load-path
subdir.el

** autoload

** Emacs包管理工具ELPA
*** ELPA简介
XEmacs的一大特色是有包管理，所以包的安装、升级比较省心，但GNU Emacs一直没有这个东西。ELPA就
是解决这个问题，它似乎是XEmacs包管理器的仿制品。ELPA由客户端package.el 和网上的包仓库
(http://tromey.com/elpa/ )组成，目前有100多个包。

而package.el 已经合入了GNU Emacs 24（尚在开发），不过Emacs 24开发团队另外提供了一个”官方”仓
库 http://elpa.gnu.org/ ，但目前上面没有几个包。

所以还是用旧的仓库，而且可以用在emacs-22/23上。

*** 如何使用
  简单地说，从 http://tromey.com/elpa/ 下载package.el 并load之后
    M-x package-list-packages
  它会列出网上仓库有哪些包，以及本地安装了哪些包，然后就可以直接选定后安装（安装
  到~/.emacs.d/elpa)
  
  在不能访问网络的时候，也可以

详情请看:
http://blog.pluskid.org/?p=206

*** 不在网上仓库里面的包，也可以用elpa来管理
**** 好处有两个: 
  1. 不用多个el文件堆在一个目录，要删除要禁用要升级替换都比较容易： 
  2. elpa可以利用autoload自己搞定包加载，不用每次手工load-library或者维护require（还得考虑怎
  么不影响启动时间）

**** 安装方法
   * M-x package-install-file &lt;file&gt;
   * M-x package-install-from-buffer

&lt;/file&gt;

**** 对包的要求
***** 单文件 foo-pkg.el
  要有标准的Header，参见[[http://www.gnu.org/software/emacs/elisp-manual/html_node/Library-Headers.html#Library-Headers][Emacs Library Header Conventions]] 
#+BEGIN_SRC emacs-lisp
;;; lua-mode.el --- a major-mode for editing Lua scripts
 
;; Copyright (C) 1997, 2001, 2004, 2006, 2007, 2010 Free Software Foundation, Inc. 

;; Author: ....... 
;;   Aaron Smith <aaron-lua>. 
;; URL:	 http://lua-mode.luaforge.net/ 
;; Version:	20100617
 
;; This file is NOT part of Emacs. 

...... 

;;; Commentary: ...... 

;;; Code: ...... 

;;;; lua-mode.el ends here 
#+END_SRC 
  + Header部分里面的"Version: xxxx"是必须有的(包括冒号)，后面是版本号。 

  这部分是用emacs自带的lm-header函数来提取的, 所以可以通过下面的方法看elpa是否可以识别其版本号 
  在Emacs中打开该el文件，对下面表示式求值
   (M-x eval-express) (lm-header "version") 

  版本号也可以是RCS版本格式(似乎不支持CVS/SVN里面的版本标记方式)，比如 

  ;; Version: Revision 1.6 2009-09-04 01:44:56 psg 
  
  此时elpa会再调用一个函数来提取实际的版本号 (
   package-strip-rcs-id (lm-header "version")) 

  另外elpa似乎有个bug, package-install-file常常报告找不到Version标识，但用 package-install-from-buffer就没有问题 
  
  + 第一行必须匹配"^;;; \\([^ ]*\\)\\.el --- \\(.*\\)$" 
  + 后面必须有";;;; file-name.el ends here"这样一行 (但可以不是最后一行。请注意前面是4个分号) 

***** pkg-ver.tar 
   + pkg-ver.tar文件名里面必须有版本号，且版本号必须为数字，不能包含字母 + ...


** el-get
...

* 键盘设定

** Hyper/Super/Alt key modifiers
*** Windows下的左右window键、Menu

分别映射为super/hyper/alt
#+begin_src emacs-lisp
  (setq w32-lwindow-modifier 'super)
  (setq w32-rwindow-modifier 'hyper)
  (setq w32-apps-modifier 'alt)
#+end_src


如果你不期望单击Windows键时就弹出开始菜单，下面的配置将单独按左Window键变为一个码为32的按键。
不过对于win+r 这样的系统热键并没有什么作用。
#+begin_src emacs-lisp
  ;; if you don't want a single press on <lwindow> to cause the Start Menu
  (setq w32-pass-lwindow-to-system nil)
  (setq w32-phantom-key-code 32)
#+end_src
*** TODO X11

FIXME: this won't work
  (define-key key-translation-map (kbd "<super>") (kbd "<f11>"))

*** Linux console
...


** key-translation-map
 * 基本用法
#+begin_src emacs-lisp
(define-key key-translation-map (kbd "<lwindow>") (kbd "<f11>"))
(define-key key-translation-map [menu] 'event-apply-hyper-modifier) 
#+end_src

 * Linux console等环境下实在得到super/hyper键时，可用如下方法来调用原来绑定到super/hyper的功能
#+begin_src emacs-lisp
(define-key key-translation-map (kbd "C-c h") 'event-apply-hyper-modifier) 
(define-key key-translation-map (kbd "C-c s") 'event-apply-super-modifier) 
(define-key key-translation-map (kbd "C-c a") 'event-apply-alt-modifier) 
#+end_src
 
 * 如果你不想C-i/C-m/C-[等键被占用(分别与TAB、Enter、ESC功能相同)
http://www.nujk.com/how-do-i-bind-a-command-to-c-i-without-changing-tab
http://stackoverflow.com/questions/1792326/how-do-i-bind-a-command-to-c-i-without-changing-tab
#+begin_src emacs-lisp
  (setq local-function-key-map (delq '(kp-tab . [9]) local-function-key-map))
  (global-set-key (kbd "C-i") 'forward-word)
  
  ;; or
  (keyboard-translate ?\C-i ?\H-i)
  (keyboard-translate ?\C-m ?\H-m)
  ;; rebind then accordantly:
  (global-set-key [?\H-m] 'delete-backward-char)
  (global-set-key [?\H-i] 'iswitchb-buffer)
  
#+end_src

* 打开文件
** emacsclient
** pipe to emacsclient
http://mark.aufflick.com/blog/2011/03/03/piping-to-an-emacs-buffer-with-emacsclient
https://gist.github.com/857999

GNU Emacs buffs will know all about emacsclient - it's a commandline program that allows
you to open files in a new buffer in an already running emacs instance. It's very
handy. What you may not know is you can also evaluate arbitrary Emacs lisp using
emacsclient. Using this fact and based on an existing example from EmacsWiki I have
written a perl script that you can pipe to, and the piped data will appear in a buffer via
emacsclient.

My ultimate aim is for a PAGER script to use instead of less in my emacs shell. While this
isn't quite perfect for that use, it's still pretty useful.

#+begin_src perl
  #!/usr/bin/perl
  use strict;
  use warnings;
  
  use IO::Select;
  
  my $emacsclient = "/usr/local/bin/emacsclient";
  
  # This script uses emacsclient, be sure to have a running server session.
  # A server-session can be started by "M-x server-start".
  
  exit 1
      if 0 != system("$emacsclient -n --eval '(progn (pop-to-buffer (get-buffer-create \"*piped*\")))'");
  
  my $s = IO::Select->new;
  $s->add(\*STDIN);
  
  while (1)
  {
      # block until data available
      my $data = <STDIN>;
  
      # exit if STDIN closed
      exit(0)
          if ! $data;
  
      # keep reading while data is available, or we have a bunch of lines
      my $lines = 0;
      $data .= <STDIN>
          while $lines++ < 100 && $s->can_read(.5);
  
      # need to escape backslashes first, otherwise we end up escaping the backslashes
      # we're using to escape the quotes...
      $data =~ s/\\/\\\\/g;
      $data =~ s/"/\\"/g;
      $data =~ s/'/'\\''/g;
      system(qq{$emacsclient -n --eval '(with-current-buffer "*piped*" (goto-char (point-max)) (insert "} . $data . qq{"))'});
  }
  
#+end_src

** hex-find-file
** tramp
[[http://blog.donews.com/pluskid/archive/2006/05/06/858306.aspx][Emacs Tramp 详解 - pluskid]]
inline methods: rsh, ssh, telnet, su, sudo, sshx, krlogin, plink
external methods: rcp, scp, sftp, rsync, psftp, fcp, ftp, smb
*** ssh
Windows上有两种方法:
 * plink from putty
 * ssh from Cygwin's openssh
*** sudo
...   

*** smb

* 编辑
** zap-up-to-char

http://www.emacswiki.org/emacs/ZapUpToChar

#+begin_src emacs-lisp
(defadvice zap-to-char (after my-zap-to-char-advice (arg char) activate)
    "Kill up to the ARG'th occurence of CHAR, and leave CHAR.
  The CHAR is replaced and the point is put before CHAR."
    (insert char)
    (forward-char -1))
#+end_src

** 替换
 * 按某个标点为分隔符分拆为多行: M-% 时在目标字符串中如何表示换行：C-q C-j
** 多个文件的查找和替换


* 窗口操作
** s-up/down/left/right move current window up/down/left/right
(built in)

#+begin_src emacs-lisp
(windmove-default-keybindings 'super) 
#+end_src


* 编程相关
** Python
[[http://in.pycon.org/2011/talks/7-emacs-as-a-python-ide][Emacs as a Python IDE - PyCon India 2011]]
[[http://pedrokroger.net/2010/07/configuring-emacs-as-a-python-ide-2/][Configuring Emacs as a Python IDE | Pedro Kroger]]
[[http://coder.cl/2010/09/emacs-as-python-ide/][emacs as python ide ― coder . cl]]

** 补全
 
** shell ff

** ipython
 
* Keyword Help

** WinHelp (.hlp)
http://www.emacswiki.org/emacs/AccessingWindowsHelpFiles

#+begin_src emacs-lisp
(require 'etags)
 (defun tcl-help ()
   (interactive )
   (shell-command 
    (concat "c:/winnt/winhlp32 -k " 
	    (find-tag-default)  
	    " D:/Program Files/Tcl/doc/tcl83.hlp &")))
#+end_src

** Compiled HtmlHelp (.chm)

http://www.emacswiki.org/emacs/MsdnHelp

Here’s a little something that I whipped up that will allow newer Htmlhelp-based versions of the
msdn work from within emacs. You will need to download and install the free Htmlhelp helper program
Keyhh.exe from http://www.keyworks.net, since the default Microsoft HH.exe will not allow you to
search for keywords from the command-line, but instead forces you to use the Htmlhelp API. (Note:
this is my first attempt at lisp, so YMMV)

#+begin_src emacs-lisp
  
  (defun show-vc-topic ()
     "Open a window showing the Visual C++ documentation for the word under the point"
     (interactive)
     (cond
      ((string= "w32" window-system)
       (start-process "vc++ msdn lookup" nil "C:/WINNT/keyhh.exe" "-#klink" (format "'%s'" (thing-at-point 'symbol)) "E:/MSDN98/98VS/1033/VCCORE.CHM" ))))
  
  (defun show-glibc-topic ()
    "Open a window showing the glibc documentation for the word under the point"
    (interactive)
    (cond
     ((string= "w32" window-system)
      (start-process "glibc lookup" nil "C:/WINNT/keyhh.exe" "-#klink" (format "'%s'" (thing-at-point 'symbol)) "E:/documents/glibc-2.2.3.chm" ))))
#+end_src

** HtmlHelp 2.0 (msdn)

 http://emacswiki.org/emacs/MsdnHelp

The new format is “Microsoft Help 2” and is viewed with “Microsoft Document Explorer”. Just as
(as is noted below) Microsoft’s HH.exe does not allow command-line keyword searches, Document
Explorer (dexplore.exe) does not allow it. H2Viewer is free software that provides this
functionality. The following command will open the MSDN Platform SDK documentation for the
“CreateWindowEx?” function (1033 indicates English language):

  h2viewer /helpcol MS.PSDK.1033 /keyword K$CreateWindowEx

#+begin_src emacs-lisp
(defun show-msdn-topic ()
  "Open a window showing the MSDN documentation for the word under the point"
  (interactive)
  (if (string= "w32" window-system)
      (start-process "MSDN lookup" nil 
		     "D:/H2Viewer132/h2viewer.exe"
		     "/appID" "MSDN-Viewer"
		     "/helpcol" "MS.VSCC.2003"
;; 		     "/filtername" "Visual C++"
		     "/Index" (current-word))))
#+end_src

** Info
2011-03-22: 发现emacs自带一个info-lookup-symbol (C-h S)可用来查函数的帮助，测试了一下elisp，好使。但配置比较复杂，没搞懂，至少awk用缺省配置查不到。

Refer `info-lookup-symbol' (built-in).
Default key binding: C-h S.

A little complicate to config.

** DevHelp

Refer /etc/emacs/site-lisp.d/50devhelp.el

devhelp -k  (keyword lookup)
devhelp -a  (assistant mode)

** Qt Assistant

......

** Web lookup

Emacs : Perl PHP Dictionary Wikipedia Google … Reference lookup
http://xahlee.org/emacs/emacs_lookup_ref.html

| Source         | URL Format                                      |
|----------------+-------------------------------------------------|
| Perl           | http://perldoc.perl.org/search.html?q=XYZ       |
| PHP            | http://us.php.net/XYZ                           |
| LSL            | http://wiki.secondlife.com/wiki/XYZ             |
| AutoHotkey     | http://www.autohotkey.com/docs/commands/XYZ.htm |
| Wikipedia      | http://en.wikipedia.org/wiki/XYZ                |
| Google         | http://www.google.com/search?q=XYZ              |
| bing           | http://www.bing.com/search?q=XYZ                |
| Wolfram/ Alpha | http://www.wolframalpha.com/input/?i=XYZ        |

#+begin_src emacs-lisp
(defun lookup-wikipedia ()
  "Look up the word under cursor in Wikipedia.
If there is a text selection (a phrase), use that

This command switches you to your browser."
 (interactive)
 (let (myword myurl)
   (setq myword
         (if (and transient-mark-mode mark-active)
             (buffer-substring-no-properties (region-beginning) (region-end))
           (thing-at-point 'symbol)))

  (setq myword (replace-regexp-in-string " " "_" myword))
  (setq myurl (concat "http://en.wikipedia.org/wiki/" myword))
  (browse-url myurl)
   ))

(defun lookup-word-definition ()
  "Look up the current word's definition in a browser.
If a region is active (a phrase), lookup that phrase."
 (interactive)
 (let (myword myurl)
   (setq myword
         (if (and transient-mark-mode mark-active)
             (buffer-substring-no-properties (region-beginning) (region-end))
           (thing-at-point 'symbol)))

  (setq myword (replace-regexp-in-string " " "%20" myword))
  (setq myurl (concat "http://www.answers.com/main/ntquery?s=" myword))

  (browse-url myurl)
  ;; (w3m-browse-url myurl) ;; if you want to browse using w3m
   ))

(global-set-key (kbd "<f6>") 'lookup-word-definition)

#+end_src



* Misc

** anything-font-families

http://d.hatena.ne.jp/mooz/

#+begin_src emacs-lisp
(require 'cl)  ; loop, delete-duplicates

(defun anything-font-families ()
  "Preconfigured `anything' for font family."
  (interactive)
  (flet ((anything-mp-highlight-match () nil))
    (anything-other-buffer
     '(anything-c-source-font-families)
     "*anything font families*")))

(defun anything-font-families-create-buffer ()
  (with-current-buffer
      (get-buffer-create "*Fonts*")
    (loop for family in (sort (delete-duplicates (font-family-list)) 'string<)
          do (insert
              (propertize (concat family "\n")
                          'font-lock-face
                          (list :family family :height 2.0 :weight 'bold))))
    (font-lock-mode 1)))

(defvar anything-c-source-font-families
      '((name . "Fonts")
        (init lambda ()
              (unless (anything-candidate-buffer)
                (save-window-excursion
                  (anything-font-families-create-buffer))
                (anything-candidate-buffer
                 (get-buffer "*Fonts*"))))
        (candidates-in-buffer)
        (get-line . buffer-substring)
        (action
         ("Copy Name" lambda
          (candidate)
          (kill-new candidate))
         ("Insert Name" lambda
          (candidate)
          (with-current-buffer anything-current-buffer
            (insert candidate))))))
#+end_src

